# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AA31Fon27QSbOPegwcXpe9-olpoOWzOw
"""



"""Importing the Dependencies"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Processing and Collection"""

# loading the csv data to a pandas Dataframe
heart_data = pd.read_csv('/content/heart.csv')

#print first 5 rows of the data set
heart_data.head()

#print last five rows of the data set
heart_data.tail()

#number of rows and columns in the data set
heart_data.shape

# getting some info about the data
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

"""1 --> represents defective heart

2 --> represents healthy heart

"""

#checking the distribution of target variable
heart_data['target'].value_counts()

"""Splitting the features and target"""

x = heart_data.drop(columns='target', axis=1)
y = heart_data['target']

print(x)

print(y)

"""Splitting the Data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)

print(x.shape, X_train.shape, X_test.shape)

"""Model Training"""

# Logistic Regression Model
model = LogisticRegression()

# training the logisticRegression model with Tarining data
model.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy score
# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy  = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on Trainig data : ", training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy  = accuracy_score(X_test_prediction, Y_test)

print("Accuracy on Testing data : ", test_data_accuracy)

"""Building a Predictive System"""

input_data = (51,1,0,140,298,0,1,122,1,4.2,1,3,3)
# change the input data to a numpy array
input_data_as_numpy_array = np.array(input_data)
# reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print("The person does not have Heart Disease")
else:
  print("The person has Heart Disease")

